{"remainingRequest":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tomiyamasatoshi/Public/01_Develop/01_GitHub/VuePractice/vue/vuex_app.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tomiyamasatoshi/Public/01_Develop/01_GitHub/VuePractice/vue/vuex_app.vue","mtime":1604504538869},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport store from '../js/vuex_store.js'\nexport default {\n    data(){\n        return{\n            //入力中の新しいタスク名を一時的に保持する\n            newTaskName: '',\n            //新しいタスクに紐づくラベル一覧を一時的に保持する\n            newTaskLabelIds: [],\n            //入力中の新しいラベル名を一時的に保持する\n            newLabelText: ''\n        }\n    },\n    computed: {\n        tasks(){\n            return store.getters.filteredTasks\n        },\n        labels(){\n            return store.state.labels\n        },\n        filter(){\n            return store.state.filter\n        }\n    },\n    methods: {\n        //タスクを追加する\n        addTask(){\n            store.commit('addTask', {\n                name: this.newTaskName,\n                labelIds: this.newTaskLabelIds\n            })\n            this.newTaskName = ''\n            this.newTaskLabelIds = []\n        },\n        //タスクの完了状態を更新する\n        toggleTaskStatus(task){\n            store.commit('toggleTaskStatus', {\n                id: task.id\n            })\n        },\n        //ラベルを追加する\n        addLabel(){\n            store.commit('addLabel', {\n                text: this.newLabelText\n            })\n            this.newLabelText = ''\n        },\n        //ラベルIDから、そのラベルのテキストを返す\n        getLabelText(id){\n            const label = this.labels.filter(label => label.id === id)[0]\n            return label ? label.text : ''\n        },\n        //フィルタする対象のラベルを変更する\n        changeFilter(labelId){\n            //changeFilterミューテーションをコミット\n            store.commit('changeFilter', {\n                filter: labelId\n            })\n        },\n        //現在の情報を保存する\n        save(){\n            //savaアクションのコミット\n            store.dispatch('save')\n        },\n        //保存されている状態を復元する\n        restore(){\n            //restoreアクションのコミット\n            store.dispatch('restore')\n        }\n    }\n}\n",{"version":3,"sources":["vuex_app.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"vuex_app.vue","sourceRoot":".","sourcesContent":["<template>\n    <div>\n        <h2>タスク一覧</h2>\n        <ul>\n            <li v-for=\"task in tasks\" v-bind:key=\"task.id\">\n                <input type=\"checkbox\" v-bind:checked=\"task.done\" v-on:change=\"toggleTaskStatus(task)\">\n                {{ task.name }}\n                [\n                <span v-for=\"id in task.labelIds\" v-bind:key=\"id\">\n                    {{ getLabelText(id) }}\n                </span>\n                ]\n            </li>\n        </ul>\n        <form v-on:submit.prevent=\"addTask\">\n            <input type=\"text\" v-model=\"newTaskName\" placeholder=\"新しいタスク\">\n        </form>\n        <h2>ラベル一覧</h2>\n        <ul>\n            <li v-for=\"label in labels\" v-bind:key=\"label.id\">\n                <input type=\"checkbox\" v-bind:value=\"label.id\" v-model=\"newTaskLabelIds\">\n                {{ label.text }}\n            </li>\n        </ul>\n        <form v-on:submit.prevent=\"addLabel\">\n            <input type=\"text\" v-model=\"newLabelText\" placeholder=\"新しいラベル\">\n        </form>\n        <h2>ラベルでフィルタ</h2>\n        <ul>\n            <li v-for=\"label in labels\" v-bind:key=\"label.id\">\n                <input type=\"radio\" v-bind:checked=\"label.id === filter\" v-on:change=\"changeFilter(label.id)\">\n                {{ label.text }}\n            </li>\n            <li>\n                <input type=\"radio\" v-bind:checked=\"filter === null\" v-on:change=\"changeFilter(null)\">\n                フィルタしない\n            </li>\n        </ul>\n        <h2>保存と復元</h2>\n        <button type=\"button\" v-on:click=\"save\">保存</button>\n        <button type=\"button\" v-on:click=\"restore\">復元</button>\n    </div>\n</template>\n\n<script>\nimport store from '../js/vuex_store.js'\nexport default {\n    data(){\n        return{\n            //入力中の新しいタスク名を一時的に保持する\n            newTaskName: '',\n            //新しいタスクに紐づくラベル一覧を一時的に保持する\n            newTaskLabelIds: [],\n            //入力中の新しいラベル名を一時的に保持する\n            newLabelText: ''\n        }\n    },\n    computed: {\n        tasks(){\n            return store.getters.filteredTasks\n        },\n        labels(){\n            return store.state.labels\n        },\n        filter(){\n            return store.state.filter\n        }\n    },\n    methods: {\n        //タスクを追加する\n        addTask(){\n            store.commit('addTask', {\n                name: this.newTaskName,\n                labelIds: this.newTaskLabelIds\n            })\n            this.newTaskName = ''\n            this.newTaskLabelIds = []\n        },\n        //タスクの完了状態を更新する\n        toggleTaskStatus(task){\n            store.commit('toggleTaskStatus', {\n                id: task.id\n            })\n        },\n        //ラベルを追加する\n        addLabel(){\n            store.commit('addLabel', {\n                text: this.newLabelText\n            })\n            this.newLabelText = ''\n        },\n        //ラベルIDから、そのラベルのテキストを返す\n        getLabelText(id){\n            const label = this.labels.filter(label => label.id === id)[0]\n            return label ? label.text : ''\n        },\n        //フィルタする対象のラベルを変更する\n        changeFilter(labelId){\n            //changeFilterミューテーションをコミット\n            store.commit('changeFilter', {\n                filter: labelId\n            })\n        },\n        //現在の情報を保存する\n        save(){\n            //savaアクションのコミット\n            store.dispatch('save')\n        },\n        //保存されている状態を復元する\n        restore(){\n            //restoreアクションのコミット\n            store.dispatch('restore')\n        }\n    }\n}\n</script>\n"]}]}